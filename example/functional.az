extern fn "Array.prototype.push" js_array_push[A](arr: Array[A], item: A): Int
extern fn "Array.prototype.map" js_array_map[A, B](arr: Array[A], f: fn(A) -> B): Array[B]
extern fn "Array.prototype.filter" js_array_filter[A](arr: Array[A], f: fn(A) -> Bool): Array[A]
extern fn "Array.prototype.reduce" js_array_reduce[A, B](arr: Array[A], f: fn(B, A) -> B, initial: B): B

fn curry(f: fn(A, B) -> C): fn(A) -> fn(B) -> C = \(x) -> \(y) -> f(x, y)
fn uncurry(f: fn(A) -> fn(B) -> C): fn(A, B) -> C = \(x, y) -> f(x)(y)

fn map_filter_greater_two(arr: Array[IAnt]) = 
  js_array_filter(
    js_array_map(arr, \(x) -> x + 1),
    \(x) -> x > 2
  )

fn test() = do
  let arr = [1, 2, 3, 4, 5]
  let result = map_filter_greater_two(arr)
  js_array_push(result, 6)

  if 1 == 1 then result else result
end

map_filter_greater_two([1, 2, 3, 4, 5])